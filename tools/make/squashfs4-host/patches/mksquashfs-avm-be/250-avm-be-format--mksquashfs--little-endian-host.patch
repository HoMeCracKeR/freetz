--- squashfs-tools-mksquashfs-avm-be/mksquashfs.c
+++ squashfs-tools-mksquashfs-avm-be/mksquashfs.c
@@ -76,6 +76,12 @@
 #include "read_fs.h"
 #include "process_fragments.h"
 
+#if defined(MKSQUASHFS_AVM_BE)
+#define _SQUASHFS_SWAP_SHORTS(s, d, n) memcpy(d, s, n * sizeof(short))
+#else
+#define _SQUASHFS_SWAP_SHORTS(s, d, n) SQUASHFS_SWAP_SHORTS(s, d, n)
+#endif
+
 int fd;
 struct squashfs_super_block sBlk;
 
@@ -380,7 +386,7 @@
 			data_cache, SQUASHFS_METADATA_SIZE,
 			SQUASHFS_METADATA_SIZE, noI, 0);
 		TRACE("Inode block @ 0x%x, size %d\n", inode_bytes, c_byte);
-		SQUASHFS_SWAP_SHORTS(&c_byte, inode_table + inode_bytes, 1);
+		_SQUASHFS_SWAP_SHORTS(&c_byte, inode_table + inode_bytes, 1);
 		inode_bytes += SQUASHFS_COMPRESSED_SIZE(c_byte) + BLOCK_OFFSET;
 		total_inode_bytes += SQUASHFS_METADATA_SIZE + BLOCK_OFFSET;
 		memmove(data_cache, data_cache + SQUASHFS_METADATA_SIZE,
@@ -521,8 +527,9 @@
 			SQUASHFS_METADATA_SIZE : cache_bytes;
 		c_byte = mangle(inode_table + inode_bytes + BLOCK_OFFSET, datap,
 			avail_bytes, SQUASHFS_METADATA_SIZE, noI, 0);
-		TRACE("Inode block @ 0x%x, size %d\n", inode_bytes, c_byte);
-		SQUASHFS_SWAP_SHORTS(&c_byte, inode_table + inode_bytes, 1); 
+		TRACE("Inode block @ 0x%x, size %d\n", inode_bytes, SQUASHFS_COMPRESSED_SIZE(c_byte));
+		_SQUASHFS_SWAP_SHORTS(&c_byte, inode_table + inode_bytes, 1); 
+		TRACE("Inode block size = 0x%04hx\n", *((unsigned short *) (inode_table + inode_bytes)));
 		inode_bytes += SQUASHFS_COMPRESSED_SIZE(c_byte) + BLOCK_OFFSET;
 		total_inode_bytes += avail_bytes + BLOCK_OFFSET;
 		datap += avail_bytes;
@@ -561,7 +568,7 @@
 			SQUASHFS_METADATA_SIZE, noI, 0);
 		TRACE("Directory block @ 0x%x, size %d\n", directory_bytes,
 			c_byte);
-		SQUASHFS_SWAP_SHORTS(&c_byte,
+		_SQUASHFS_SWAP_SHORTS(&c_byte,
 			directory_table + directory_bytes, 1);
 		directory_bytes += SQUASHFS_COMPRESSED_SIZE(c_byte) +
 			BLOCK_OFFSET;
@@ -588,7 +595,11 @@
 		SQUASHFS_SWAP_INTS(&id_table[i]->id, p + i, 1);
 	}
 
+#if defined(MKSQUASHFS_AVM_BE)
+	return generic_write_table(id_bytes, p, 0, NULL, TRUE); /* AVM-BE always uncompressed */
+#else
 	return generic_write_table(id_bytes, p, 0, NULL, noI);
+#endif
 }
 
 
@@ -1202,7 +1213,7 @@
 				noI, 0);
 		TRACE("Directory block @ 0x%x, size %d\n", directory_bytes,
 			c_byte);
-		SQUASHFS_SWAP_SHORTS(&c_byte,
+		_SQUASHFS_SWAP_SHORTS(&c_byte,
 			directory_table + directory_bytes, 1);
 		directory_bytes += SQUASHFS_COMPRESSED_SIZE(c_byte) +
 			BLOCK_OFFSET;
@@ -1576,7 +1587,7 @@
 		c_byte = mangle(cbuffer + BLOCK_OFFSET, buffer + i *
 			SQUASHFS_METADATA_SIZE , avail_bytes,
 			SQUASHFS_METADATA_SIZE, uncompressed, 0);
-		SQUASHFS_SWAP_SHORTS(&c_byte, cbuffer, 1);
+		_SQUASHFS_SWAP_SHORTS(&c_byte, cbuffer, 1);
 		list[i] = bytes;
 		compressed_size = SQUASHFS_COMPRESSED_SIZE(c_byte) +
 			BLOCK_OFFSET;
--- squashfs-tools-mksquashfs-avm-be/squashfs_swap.h
+++ squashfs-tools-mksquashfs-avm-be/squashfs_swap.h
@@ -27,7 +27,7 @@
  * macros to convert each stucture from big endian to little endian
  */
 
-#if __BYTE_ORDER == __BIG_ENDIAN
+#if __BYTE_ORDER == __BIG_ENDIAN || defined(MKSQUASHFS_AVM_BE)
 #include <stddef.h>
 extern void swap_le16(void *, void *);
 extern void swap_le32(void *, void *);
--- squashfs-tools-mksquashfs-avm-be/swap.c
+++ squashfs-tools-mksquashfs-avm-be/swap.c
@@ -27,7 +27,7 @@
 #include <endian.h>
 #endif
 
-#if __BYTE_ORDER == __BIG_ENDIAN
+#if __BYTE_ORDER == __BIG_ENDIAN || defined(MKSQUASHFS_AVM_BE)
 void swap_le16(void *src, void *dest)
 {
 	unsigned char *s = src;
--- squashfs-tools-mksquashfs-avm-be/gzip_wrapper.h
+++ squashfs-tools-mksquashfs-avm-be/gzip_wrapper.h
@@ -32,7 +32,7 @@
 #include <endian.h>
 #endif
 
-#if __BYTE_ORDER == __BIG_ENDIAN
+#if __BYTE_ORDER == __BIG_ENDIAN || defined(MKSQUASHFS_AVM_BE) /* assumption, no AVM-BE image with user defined comp options available */
 extern unsigned int inswap_le16(unsigned short);
 extern unsigned int inswap_le32(unsigned int);
 
--- squashfs-tools-mksquashfs-avm-be/lz4_wrapper.h
+++ squashfs-tools-mksquashfs-avm-be/lz4_wrapper.h
@@ -32,7 +32,7 @@
 #include <endian.h>
 #endif
 
-#if __BYTE_ORDER == __BIG_ENDIAN
+#if __BYTE_ORDER == __BIG_ENDIAN || defined(MKSQUASHFS_AVM_BE) /* assumption, no AVM-BE image with user defined comp options available */
 extern unsigned int inswap_le32(unsigned int);
 
 #define SQUASHFS_INSWAP_COMP_OPTS(s) { \
--- squashfs-tools-mksquashfs-avm-be/lzo_wrapper.h
+++ squashfs-tools-mksquashfs-avm-be/lzo_wrapper.h
@@ -32,7 +32,7 @@
 #include <endian.h>
 #endif
 
-#if __BYTE_ORDER == __BIG_ENDIAN
+#if __BYTE_ORDER == __BIG_ENDIAN || defined(MKSQUASHFS_AVM_BE) /* assumption, no AVM-BE image with user defined comp options available */
 extern unsigned int inswap_le32(unsigned int);
 
 #define SQUASHFS_INSWAP_COMP_OPTS(s) { \
--- squashfs-tools-mksquashfs-avm-be/xz_wrapper.h
+++ squashfs-tools-mksquashfs-avm-be/xz_wrapper.h
@@ -32,7 +32,7 @@
 #include <endian.h>
 #endif
 
-#if __BYTE_ORDER == __BIG_ENDIAN
+#if __BYTE_ORDER == __BIG_ENDIAN || defined(MKSQUASHFS_AVM_BE) /* assumption, no AVM-BE image with user defined comp options available */
 extern unsigned int inswap_le32(unsigned int);
 
 #define SQUASHFS_INSWAP_COMP_OPTS(s) { \
