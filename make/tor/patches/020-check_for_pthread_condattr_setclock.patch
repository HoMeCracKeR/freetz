
Only NPTL version of uClibc's libpthread provides 'pthread_condattr_setclock'. Check for it in configure to avoid linking errors.

--- configure.ac
+++ configure.ac
@@ -423,6 +423,7 @@
 if test "$bwin32" != true; then
   AC_CHECK_HEADERS(pthread.h)
   AC_CHECK_FUNCS(pthread_create)
+  AC_CHECK_FUNCS(pthread_condattr_setclock)
 fi
 
 if test "$bwin32" = true; then
--- orconfig.h.in
+++ orconfig.h.in
@@ -268,6 +268,9 @@
 /* Define to 1 if you have the `pthread_create' function. */
 #undef HAVE_PTHREAD_CREATE
 
+/* Define to 1 if you have the `pthread_condattr_setclock' function. */
+#undef HAVE_PTHREAD_CONDATTR_SETCLOCK
+
 /* Define to 1 if you have the <pthread.h> header file. */
 #undef HAVE_PTHREAD_H
 
--- configure
+++ configure
@@ -11830,6 +11830,17 @@
 fi
 done
 
+  for ac_func in pthread_condattr_setclock
+do :
+  ac_fn_c_check_func "$LINENO" "pthread_condattr_setclock" "ac_cv_func_pthread_condattr_setclock"
+if test "x$ac_cv_func_pthread_condattr_setclock" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_PTHREAD_CONDATTR_SETCLOCK 1
+_ACEOF
+
+fi
+done
+
 fi
 
 
--- src/common/compat_pthreads.c
+++ src/common/compat_pthreads.c
@@ -185,7 +185,7 @@
     return -1;
   }
 
-#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
+#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC) && defined(HAVE_PTHREAD_CONDATTR_SETCLOCK)
   /* Use monotonic time so when we timedwait() on it, any clock adjustment
    * won't affect the timeout value. */
   if (pthread_condattr_setclock(&condattr, CLOCK_MONOTONIC)) {
@@ -234,7 +234,7 @@
     struct timeval tvnow, tvsum;
     struct timespec ts;
     while (1) {
-#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
+#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC) && defined(HAVE_PTHREAD_CONDATTR_SETCLOCK)
       if (clock_gettime(CLOCK_MONOTONIC, &ts) < 0) {
         return -1;
       }
