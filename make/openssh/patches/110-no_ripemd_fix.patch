--- digest.h
+++ digest.h
@@ -18,10 +18,27 @@
 #ifndef _DIGEST_H
 #define _DIGEST_H
 
+#include <openssl/evp.h>
+
 /* Maximum digest output length */
 #define SSH_DIGEST_MAX_LENGTH	64
 
 /* Digest algorithms */
+enum E_SSH_DIGEST {
+	SSH_DIGEST_MD5,
+#ifndef OPENSSL_NO_RIPEMD
+	SSH_DIGEST_RIPEMD160,
+#endif
+	SSH_DIGEST_SHA1,
+/* TODO: #ifdef HAVE_EVP_SHA256 */
+	SSH_DIGEST_SHA256,
+	SSH_DIGEST_SHA384,
+	SSH_DIGEST_SHA512,
+/* #endif */
+	SSH_DIGEST_MAX
+};
+
+#if 0 /* original code */
 #define SSH_DIGEST_MD5		0
 #define SSH_DIGEST_RIPEMD160	1
 #define SSH_DIGEST_SHA1		2
@@ -29,6 +46,7 @@
 #define SSH_DIGEST_SHA384	4
 #define SSH_DIGEST_SHA512	5
 #define SSH_DIGEST_MAX		6
+#endif
 
 struct ssh_digest_ctx;
 
--- digest-openssl.c
+++ digest-openssl.c
@@ -44,7 +44,9 @@
 /* NB. Indexed directly by algorithm number */
 const struct ssh_digest digests[] = {
 	{ SSH_DIGEST_MD5,	"MD5",	 	16,	EVP_md5 },
+#ifndef OPENSSL_NO_RIPEMD
 	{ SSH_DIGEST_RIPEMD160,	"RIPEMD160",	20,	EVP_ripemd160 },
+#endif
 	{ SSH_DIGEST_SHA1,	"SHA1",	 	20,	EVP_sha1 },
 #ifdef HAVE_EVP_SHA256 /* XXX replace with local if missing */
 	{ SSH_DIGEST_SHA256,	"SHA256", 	32,	EVP_sha256 },
--- mac.c
+++ mac.c
@@ -70,8 +70,10 @@
 #endif
 	{ "hmac-md5",				SSH_DIGEST, SSH_DIGEST_MD5, 0, 0, 0, 0 },
 	{ "hmac-md5-96",			SSH_DIGEST, SSH_DIGEST_MD5, 96, 0, 0, 0 },
+#ifndef OPENSSL_NO_RIPEMD
 	{ "hmac-ripemd160",			SSH_DIGEST, SSH_DIGEST_RIPEMD160, 0, 0, 0, 0 },
 	{ "hmac-ripemd160@openssh.com",		SSH_DIGEST, SSH_DIGEST_RIPEMD160, 0, 0, 0, 0 },
+#endif
 	{ "umac-64@openssh.com",		SSH_UMAC, 0, 0, 128, 64, 0 },
 	{ "umac-128@openssh.com",		SSH_UMAC128, 0, 0, 128, 128, 0 },
 
@@ -84,7 +86,9 @@
 #endif
 	{ "hmac-md5-etm@openssh.com",		SSH_DIGEST, SSH_DIGEST_MD5, 0, 0, 0, 1 },
 	{ "hmac-md5-96-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_MD5, 96, 0, 0, 1 },
+#ifndef OPENSSL_NO_RIPEMD
 	{ "hmac-ripemd160-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_RIPEMD160, 0, 0, 0, 1 },
+#endif
 	{ "umac-64-etm@openssh.com",		SSH_UMAC, 0, 0, 128, 64, 1 },
 	{ "umac-128-etm@openssh.com",		SSH_UMAC128, 0, 0, 128, 128, 1 },
 
