--- libbb/appletlib.c
+++ libbb/appletlib.c
@@ -146,12 +146,28 @@
 	return strcmp(name, APPLET_NAME(i));
 }
 #endif
+#if ENABLE_HTTPD
+static const char httpd_applet_name[] ALIGN1 = "httpd";
+#endif
+#if ENABLE_WGET
+static const char wget_applet_name[] ALIGN1 = "wget";
+static const char wget_alias_applet_name[] ALIGN1 = "wget-busybox";
+#endif
 int FAST_FUNC find_applet_by_name(const char *name)
 {
+	const char *name_to_search_for =
+#if ENABLE_HTTPD
+	(strncmp(name, httpd_applet_name, 5) == 0) ? httpd_applet_name :
+#endif
+#if ENABLE_WGET
+	(strncmp(name, wget_alias_applet_name, 12) == 0) ? wget_applet_name :
+#endif
+	name;
+
 #if NUM_APPLETS > 8
 	/* Do a binary search to find the applet entry given the name. */
 	const char *p;
-	p = bsearch(name, (void*)(ptrdiff_t)1, ARRAY_SIZE(applet_main), 1, applet_name_compare);
+	p = bsearch(name_to_search_for, (void*)(ptrdiff_t)1, ARRAY_SIZE(applet_main), 1, applet_name_compare);
 	/*
 	 * if (!p) return -1;
 	 * ^^^^^^^^^^^^^^^^^^ the code below will do this if p == NULL :)
@@ -162,7 +178,7 @@
 	int i = 0;
 	const char *p = applet_names;
 	while (i < NUM_APPLETS) {
-		if (strcmp(name, p) == 0)
+		if (strcmp(name_to_search_for, p) == 0)
 			return i;
 		p += strlen(p) + 1;
 		i++;
